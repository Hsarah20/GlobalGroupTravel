@isTest
public class CancelTripsBatchTest {
    
    @testSetup
    static void setupTestData() {
        List<Trip__c> trips = new List<Trip__c>();

        // Trip √©ligibles au batch (Start_Date__c dans 7 jours, Participants < 10)
        trips.add(new Trip__c( Status__c = 'A venir', Start_Date__c = System.today().addDays(7), Number_of_Participants__c = 5));
        trips.add(new Trip__c(Status__c = 'A venir', Start_Date__c = System.today().addDays(7), Number_of_Participants__c = 3));

        // Trip NON √©ligible (trop de participants)
        trips.add(new Trip__c( Status__c = 'A venir', Start_Date__c = System.today().addDays(7), Number_of_Participants__c = 15));

        // Trip NON √©ligible (date hors de la plage)
        trips.add(new Trip__c(Status__c = 'A venir', Start_Date__c = System.today().addDays(10), Number_of_Participants__c = 5));

        // Trip NON √©ligible (Number_of_Participants__c NULL)
        trips.add(new Trip__c(Status__c = 'A venir', Start_Date__c = System.today().addDays(7), Number_of_Participants__c = NULL));

        insert trips;
    }

    @isTest
    static void testBatchExecution() {
        // V√©rifier que les voyages sont bien cr√©√©s et dans le bon √©tat initial
        List<Trip__c> beforeTrips = [SELECT Id, Status__c FROM Trip__c];
        System.assertEquals(5, beforeTrips.size(), 'Tous les voyages doivent √™tre cr√©√©s');
        for (Trip__c trip : beforeTrips) {
            System.assertEquals('A venir', trip.Status__c, 'Le statut initial doit √™tre "A venir"');
        }

        // üèÅ Lancer le batch
        Test.startTest();
        CancelTripsBatch batch = new CancelTripsBatch();
        Database.executeBatch(batch);
        Test.stopTest();

        // V√©rifier les r√©sultats apr√®s l'ex√©cution du batch
        List<Trip__c> afterTrips = [SELECT Id, Status__c, Number_of_Participants__c, Start_Date__c FROM Trip__c];

        Integer cancelledCount = 0;
        Integer unchangedCount = 0;

        for (Trip__c trip : afterTrips) {
            if (trip.Start_Date__c == System.today().addDays(7) && trip.Number_of_Participants__c < 10 && trip.Number_of_Participants__c != null) {
                System.assertEquals('Annul√©', trip.Status__c, 'Le voyage doit √™tre annul√©');
                cancelledCount++;
            } else {
                System.assertEquals('A venir', trip.Status__c, 'Les voyages non √©ligibles doivent rester inchang√©s');
                unchangedCount++;
            }
        }

        // V√©rifier que seuls les voyages √©ligibles ont √©t√© annul√©s
        System.assertEquals(2, cancelledCount, '2 voyages doivent √™tre annul√©s');
        System.assertEquals(3, unchangedCount, '3 voyages ne doivent pas √™tre modifi√©s');
    }
}
